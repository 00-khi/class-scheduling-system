// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../lib/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// ----- Enums -----

enum InstructorStatus {
  PT
  PTFL
  PROBY
  FT
}

enum RoomType {
  Lecture
  Laboratory
}

enum Semester {
  First
  Second
}

// ----- Models -----

model AcademicQualification {
  id   Int    @id @default(autoincrement())
  code String @unique
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  instructors Instructor[]
}

model Instructor {
  id     Int              @id @default(autoincrement())
  name   String           @unique
  status InstructorStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicQualificationId Int
  academicQualification   AcademicQualification? @relation(fields: [academicQualificationId], references: [id])
}

model AcademicLevel {
  id       Int    @id @default(autoincrement())
  code     String @unique
  name     String @unique
  yearList Json   @default("[]")

  yearStart     Int
  numberOfYears Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses  Course[]
  subjects Subject[]
}

model Course {
  id   Int    @id @default(autoincrement())
  code String @unique
  name String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicLevelId Int
  academicLevel   AcademicLevel? @relation(fields: [academicLevelId], references: [id])

  courseSubjects CourseSubject[]
  sections       Section[]
}

model Subject {
  id       Int      @id @default(autoincrement())
  code     String   @unique
  name     String   @unique
  semester Semester
  units    Int
  type     RoomType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicLevelId Int
  academicLevel   AcademicLevel @relation(fields: [academicLevelId], references: [id])

  courseSubjects   CourseSubject[]
  scheduledSubject ScheduledSubject[]
}

// This is the intermediate join table to link Subjects and Courses
// and store the specific year for each link.
model CourseSubject {
  id   Int @id @default(autoincrement())
  year Int

  courseId  Int
  subjectId Int

  course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  // A unique constraint to prevent duplicate entries (e.g., a subject can only be
  // associated with a specific course and year once).
  @@unique([subjectId, courseId, year])
}

model Room {
  id   Int      @id @default(autoincrement())
  name String   @unique
  type RoomType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  scheduledSubject ScheduledSubject[]
}

model Section {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  year     Int
  semester Semester

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  courseId Int
  course   Course @relation(fields: [courseId], references: [id])

  // You can query subjects through CourseSubject
  // Example: Section.course.CourseSubject -> gives subjects for same course and year

  scheduledSubject ScheduledSubject[]
}

model ScheduledSubject {
  id        Int    @id @default(autoincrement())
  startTime String
  endTime   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  sectionId Int
  roomId    Int
  subjectId Int

  section Section @relation(fields: [sectionId], references: [id])
  room    Room    @relation(fields: [roomId], references: [id])
  subject Subject @relation(fields: [subjectId], references: [id])

  // Prevents exact duplicates
  @@unique([sectionId, roomId, subjectId, startTime, endTime])
}
